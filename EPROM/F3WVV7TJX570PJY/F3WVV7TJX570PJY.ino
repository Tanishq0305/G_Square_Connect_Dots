#include <Wire.h>

const int writeBTN = 9;
const int readBTN = 8;

const int debounceDelay = 50; // 50 ms delay to wait until stable read

const byte EEPROM_ADDR = 0x50; // I2C address for 24LC128 EEPROM

// Parsed HEX file data (first 256 bytes)
const byte hexData[] = {
  0x0C, 0x94, 0x62, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00,
  0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00,
  0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00,
  0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00,
  0x0C, 0x94, 0xFD, 0x04, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x6D, 0x05, 0x0C, 0x94, 0x47, 0x05,
  0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00, 0x0C, 0x94, 0x8A, 0x00,
  0x0C, 0x94, 0x9F, 0x05, 0x0C, 0x94, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x26, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x01, 0x00, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x28, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00,
  0x27, 0x00, 0x2A, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03,
  0x03, 0x03, 0x03, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10,
  0x20, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0xBE, 0x06, 0x11, 0x24, 0x1F, 0xBE, 0xCF, 0xEF, 0xD8,
  0xE0, 0xDE, 0xBF, 0xCD, 0xBF, 0x11, 0xE0, 0xA0, 0xE0, 0xB1, 0xE0, 0xE6, 0xEB, 0xF1, 0xE1, 0x02,
  0xC0, 0x05, 0x90, 0x0D, 0x92, 0xA6, 0x3B, 0xB1, 0x07, 0xD9, 0xF7, 0x23, 0xE0, 0xA6, 0xEB, 0xB1,
  0xE0, 0x01, 0xC0, 0x1D, 0x92, 0xA4, 0x35, 0xB2, 0x07, 0xE1, 0xF7, 0x10, 0xE0, 0xC2, 0xE6, 0xD0,
  0xE0, 0x04, 0xC0, 0x21, 0x97, 0xFE, 0x01, 0x0E, 0x94, 0xD3, 0x08, 0xC1, 0x36, 0xD1, 0x07, 0xC9,
  0xF7, 0x0E, 0x94, 0xF7, 0x06, 0x0C, 0x94, 0xD9, 0x08, 0x0C, 0x94, 0x00, 0x00, 0xCF, 0x93, 0xDF,
  0x93, 0x90, 0xE0, 0xFC, 0x01, 0xE2, 0x55, 0xFF, 0x4F, 0x24, 0x91, 0x86, 0x56, 0x9F, 0x4F, 0xFC,
  0x01, 0x84, 0x91, 0x88, 0x23, 0xC1, 0xF0, 0x90, 0xE0, 0x88, 0x0F, 0x99, 0x1F, 0xFC, 0x01, 0xE0,
  0x57, 0xFF, 0x4F, 0xC5, 0x91, 0xD4, 0x91, 0xFC, 0x01, 0xEA, 0x57, 0xFF, 0x4F, 0xA5, 0x91, 0xB4,
  0x91, 0x9F, 0xB7, 0xF8, 0x94, 0x38, 0x81, 0x82, 0x2F, 0x80, 0x95, 0x83, 0x23, 0x88, 0x83, 0xEC,
  0x91, 0xE2, 0x2B, 0xEC, 0x93, 0x9F, 0xBF, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0x83, 0x30, 0x81,
  0xF0, 0x28, 0xF4, 0x81, 0x30, 0x99, 0xF0, 0x82, 0x30, 0xA9, 0xF0, 0x08, 0x95, 0x87, 0x30, 0xA9,
  0xF0, 0x88, 0x30, 0xC9, 0xF0, 0x84, 0x30, 0xB1, 0xF4, 0x80, 0x91, 0x80, 0x00, 0x8F, 0x7D, 0x03,
  0xC0, 0x80, 0x91, 0x80, 0x00
};

char MEM[320];

void setup() {
  Serial.begin(9600);
  Wire.begin();

  pinMode(writeBTN, INPUT_PULLUP);
  pinMode(readBTN, INPUT_PULLUP);
}

void loop() {

  if (!debounce(writeBTN)) {
    Serial.println();
    Serial.println("Writing to Ext.EEPROM...");

    for (unsigned int i = 0; i < sizeof(hexData); i++) {
      writeEEPROM(i, hexData[i]);
    }
    Serial.println("Write Complete");
  }

  if (!debounce(readBTN)) {
    Serial.println();
    Serial.println("Reading Ext.EEPROM...");
    for (unsigned int j = 0; j < sizeof(MEM); j++) {
      MEM[j] = readEEPROM(j);
    }
    Serial.println("Read Complete");
    Serial.println("EEPROM Content:");
    for (unsigned int k = 0; k < sizeof(MEM); k++) {
      Serial.print(MEM[k], HEX);
      Serial.print(" ");
    }
    Serial.println();
  }
}

void writeEEPROM(unsigned int address, byte data) {
  Wire.beginTransmission(EEPROM_ADDR);
  Wire.write((int)highByte(address));
  Wire.write((int)lowByte(address));
  Wire.write(data);
  Wire.endTransmission();
  delay(5); // wait to complete the write cycle
}

byte readEEPROM(unsigned int address) {
  byte data;
  Wire.beginTransmission(EEPROM_ADDR);
  Wire.write((int)highByte(address));
  Wire.write((int)lowByte(address));
  Wire.endTransmission();
  Wire.requestFrom(EEPROM_ADDR, (byte)1);
  while (Wire.available() == 0);  // wait for data
  data = Wire.read();
  return data;
}

boolean debounce(int pin) {
  boolean state;
  boolean previousState;
  previousState = digitalRead(pin); // store switch state

  for (int counter = 0; counter < debounceDelay; counter++) {
    delay(5); // wait for 5 ms
    state = digitalRead(pin); // read the pin
    if (state != previousState) {
      counter = 0; // reset the counter if the state changes
      previousState = state; // save the current state
    }
  }

  return state; // now return the stable state
}
